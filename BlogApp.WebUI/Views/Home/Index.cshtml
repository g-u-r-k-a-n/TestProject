@model IEnumerable<Blog>
@{
    ViewData["Title"] = "Home";
}

<div class="container my-4">
    <div class="row mt-3">
        <div class="col-md-12">
            <partial name="_Slider" model="@Model.OrderBy(x => x.Date).Take(5)" />
            <h2>Proje Hakkında</h2>
            <ul>
                <li>.NET Core 3.1</li>
                <li>C# 8.0</li>
                <li>MSSQL Server 2017</li>
                <li>Entity Framework Core 3.1.5</li>
                <li>Code First with Migrations</li>
                <li>ASP.NET Core Identity</li>
            </ul>
            <p class="home-p">
                Projenin <a href="https://github.com/gurkantuna/BlogApp" target="_blank">github.com/gurkantuna/BlogApp</a> github linkinde kodlar public repo içinde ulaşılabilir durumdadır. EF Migration kullandığım için SQL Server çalışan herhangi bir makine ile local db otomatik oluşturularak proje çalışır duruma gelecektir. Local dışında farklı bağlantı dizeleri de verilebilecek şekilde appsettings.{Environment}.json dosyayı da domain içinde bıraktım.
            </p>
            <p class="home-p">
                .NET Core ile oluşturduğum bir örnek projedir. Basitliği korumak adına ve sıradan bir blog projesi olduğu için <b>Core, Entity, DataAccess ve UI</b> olmak üzere katmanları sade tuttum.
                <b>Microservice benzeri ya da api gateway gibi bir mimari bulunmamaktadır.</b> Örnek bir proje olmasından dolayı sadece temel ihtiyaçlar ve kısmen görsellik gözetmek durumunda kaldığım için Business, Web Service, Web API gibi katmanları yazmaya gerek duymadım. Kendi hostingimdeki subdomain sınırlamasından dolayı iis virtual directory üzerinde çalışıyor, bu yüzden bazı route ayarlarını manuel yapmak durumunda kaldım.
                Fakat veri çekme, güncelleme, silme gibi rutin işlemleri kendi projelerim için .NET Core ile yazdığım GurkanTuna.Core.dll library ile oluşturdum.
                <b>
                    Core dll için oluşturduğum asıl projede SOLID principles, Aspect Oriented Programming, Logging, Caching, Authentication , Authorization, Exception Handling, Performance Monitoring, Repository Pattern,
                    Unit of WorkPattern, Business Layer, Web API
                </b> gibi enterprise projeler için gerekli <b>'Cross Cutting Concerns'</b> ve yaklaşımlar bulunuyor. İhtiyacı karşılamakla birlikte zaman zaman refactor yapıyorum.
            </p>
            <p class="home-p">
                Ayrıca az da olsa görsellik için bootstrap dışında minify edilmiş şekilde lightbox, font-awesome,bootbox, ckeditor, popper gibi küçük js libraryleri de kullandım. Media dosyalar dışında js ve css için sadece birer request gitmektedir. Bu arada böyle yarı Türkçe yarı İngilizce konuşan biri değilim :) Ama bazen yazarken birebir karşılığı olmadığı zaman hepsi birbirine girmek zorunda kalıyor maalesef.
            </p>
            <p class="home-p">
                "member" kullanıcı adı ve "123" şifresi ile Operations linkinden blog ekleme vb. işlemler yapılabilir. Authorization örneklendirme için normalde admin panelinden ulaşılan Users, Cliams vb. linkleri de navbar'a ekledim. Fakat tahmin edileceği üzere sadece admin şifresi ile ulaşılabilir durumdadır.
            </p>
            <p class="font-italic text-right">Gürkan Tuna</p>
        </div>
    </div>
</div>
